Trying to get the types right in parsing my yaml config file is hard.  I've been slowly figuring out where to expect stumbling blocks, and also finding tricks to help me debug.  Also getting interesting google search results along the way.

One nice observation - I was worried about the cost of switching all my Maybe's to Either's in my use of Data.Aeson, and also worried that I wouldn't be able to get the type signatures right with the slightly-more-complicated Either type, so I went with Maybe.

Then, when I finally got my code to compile, I ran it, printed the results of the parse from main (which come back wrapped in Maybe), and got the uninformative "Nothing" result.

I was very happy to find, though, that switching over to Either was _completely_ painless.  I only have two functions of my own that have any Maybe/Either return value, so finding them and changing their signatures was easy.  I was hung up on a type error in a line within a do block, using the Left constructor, simply because that constructor used to be Nothing.  I just needed to construct my Left value in parentheses.

Mixing together all the aeson functions of type 
Value -> Parser a -> b
(like my own fromJSON instances), and 
(a -> Parser b) -> a -> Either s b
(like parseEither) has been tricky, especially inside do blocks.  This is because I have trouble understanding what the do block means exactly.  I often try to use (<-) to extract a value from a Parser monad, when the expressions within the do block are about the Either monad.

One thing that has helped has been creating a skeletal do block and creating throw-away values within it:
myLoadSettings :: Object -> Maybe [Settings]
myLoadSettings obj = do
  let a = test_expression :: SanityCheck Type
  return []

These little bindings let me build up an expression with a couple combinators and make sure that I am keeping the type straight.  So far, this trick is really helping me make progress, where a couple days ago I felt very stuck!
